{
  "swagger": "2.0",
  "info": {
    "title": "Face API - V1.0",
    "version": "1.0"
  },
  "host": "westus.api.cognitive.microsoft.com",
  "basePath": "/face/v1.0",
  "schemes": [
    "https"
  ],
  "paths": {
    "/detect": {
      "post": {
        "description": "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.\r\n\r\n<ul>\r\n<li>Optional parameters for returning faceId, landmarks, and attributes. Attributes include age, gender, smile intensity, facial hair, head pose and glasses. faceId is for other APIs use including\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>,\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a\">Face - Verify</a>, and\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\r\nThe faceId will expire in 24 hours after detection call.</li>\r\n<ul>\r\n<li>JPEG, PNG, GIF(the first frame), and BMP are supported. The image file size should be larger than or equal to 1KB but no larger than 4MB.</li>\r\n<li>The detectable face size is between 36x36 to 4096x4096 pixels. The faces out of this range will not be detected.</li>\r\n<li>A maximum of 64 faces could be returned for an image. The returned faces are ranked by face rectangle size in descending order.</li>\r\n<li>Some faces may not be detected for technical challenges, e.g. very large face angles (head-pose) or large occlusion. Frontal and near-frontal faces have the best results.</li>\r\n<li>Attributes (age, gender, headPose, smile, facialHair, and glasses) are still experimental and may not be very accurate. HeadPose's pitch value is a reserved field and will always return 0.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h4>Http Method</h4>\r\nPOST",
        "operationId": "Face - Detect",
        "parameters": [
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "Return faceIds of the detected faces or not. The default value is true. ",
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "Return face landmarks of the detected faces or not. The default value is false. ",
            "type": "boolean",
            "default": false
          },
          {
            "name": "returnFaceAttributes",
            "in": "query",
            "description": "Analyze and return the one or more specified face attributes in the comma-separated string like \"returnFaceAttributes=age,gender\". Supported face attributes include age, gender, headPose, smile, facialHair, and glasses. Note that each face attribute analysis has additional computational and time cost.",
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns an array of face entries ranked by face rectangle size in descending\r\norder. An empty response indicates no faces detected. A face entry may contain the following\r\nvalues depending on input parameters:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>faceId</td><th>String</th><td>Unique faceId of the detected face, created by detection API and it will expire in 24 hours after detection call. To return this, it requires \"returnFaceId\" parameter to be true.</td></tr>\r\n<tr><td>faceRectangle</td><th>Object</th><td>A rectangle area for the face location on image.</td></tr>\r\n<tr><td>faceLandmarks</td><th>Object</th><td>An array of 27-point face landmarks pointing to the important positions of face components. To return this, it requires \"returnFaceLandmarks\" parameter to be true.</td></tr>\r\n<tr><td>faceAttributes</td><th>Object</th>\r\n<td> Face Attributes:\r\n<ul>\r\n<li>age: an age number in years. </li>\r\n<li>gender: male or female.</li>\r\n<li>smile: smile intensity, a number between [0,1] </li>\r\n<li>facialHair: consists of lengths of three facial hair areas: moustache, beard and sideburns. </li>\r\n<li>headPose: 3-D roll/yew/pitch angles for face direction. Pitch value is a reserved field and will always return 0.</li>\r\n<li>glasses: glasses type. Possible values are 'noGlasses', 'readingGlasses', 'sunglasses', 'swimmingGoggles'. </li>\r\n</ul>\r\n</td></tr>\r\n</tbody>\r\n</table>",
            "examples": {
              "application/json": "[\r\n    {\r\n        \"faceId\": \"c5c24a82-6845-4031-9d5d-978df9175426\",\r\n        \"faceRectangle\": {\r\n            \"width\": 78,\r\n            \"height\": 78,\r\n            \"left\": 394,\r\n            \"top\": 54\r\n        },\r\n        \"faceLandmarks\": {\r\n            \"pupilLeft\": {\r\n                \"x\": 412.7,\r\n                \"y\": 78.4 \r\n            },\r\n            \"pupilRight\": {\r\n                \"x\": 446.8,\r\n                \"y\": 74.2 \r\n            },\r\n            \"noseTip\": {\r\n                \"x\": 437.7,\r\n                \"y\": 92.4 \r\n            },\r\n            \"mouthLeft\": {\r\n                \"x\": 417.8,\r\n                \"y\": 114.4 \r\n            },\r\n            \"mouthRight\": {\r\n                \"x\": 451.3,\r\n                \"y\": 109.3 \r\n            },\r\n            \"eyebrowLeftOuter\": {\r\n                \"x\": 397.9,\r\n                \"y\": 78.5 \r\n            },\r\n            \"eyebrowLeftInner\": {\r\n                \"x\": 425.4,\r\n                \"y\": 70.5 \r\n            },\r\n            \"eyeLeftOuter\": {\r\n                \"x\": 406.7,\r\n                \"y\": 80.6 \r\n            },\r\n            \"eyeLeftTop\": {\r\n                \"x\": 412.2,\r\n                \"y\": 76.2 \r\n            },\r\n            \"eyeLeftBottom\": {\r\n                \"x\": 413.0,\r\n                \"y\": 80.1 \r\n            },\r\n            \"eyeLeftInner\": {\r\n                \"x\": 418.9,\r\n                \"y\": 78.0 \r\n            },\r\n            \"eyebrowRightInner\": {\r\n                \"x\": 4.8,\r\n                \"y\": 69.7 \r\n            },\r\n            \"eyebrowRightOuter\": {\r\n                \"x\": 5.5,\r\n                \"y\": 68.5 \r\n            },\r\n            \"eyeRightInner\": {\r\n                \"x\": 441.5,\r\n                \"y\": 75.0 \r\n            },\r\n            \"eyeRightTop\": {\r\n                \"x\": 446.4,\r\n                \"y\": 71.7 \r\n            },\r\n            \"eyeRightBottom\": {\r\n                \"x\": 447.0,\r\n                \"y\": 75.3 \r\n            },\r\n            \"eyeRightOuter\": {\r\n                \"x\": 451.7,\r\n                \"y\": 73.4 \r\n            },\r\n            \"noseRootLeft\": {\r\n                \"x\": 428.0,\r\n                \"y\": 77.1 \r\n            },\r\n            \"noseRootRight\": {\r\n                \"x\": 435.8,\r\n                \"y\": 75.6 \r\n            },\r\n            \"noseLeftAlarTop\": {\r\n                \"x\": 428.3,\r\n                \"y\": 89.7 \r\n            },\r\n            \"noseRightAlarTop\": {\r\n                \"x\": 442.2,\r\n                \"y\": 87.0 \r\n            },\r\n            \"noseLeftAlarOutTip\": {\r\n                \"x\": 424.3,\r\n                \"y\": 96.4 \r\n            },\r\n            \"noseRightAlarOutTip\": {\r\n                \"x\": 446.6,\r\n                \"y\": 92.5 \r\n            },\r\n            \"upperLipTop\": {\r\n                \"x\": 437.6,\r\n                \"y\": 105.9 \r\n            },\r\n            \"upperLipBottom\": {\r\n                \"x\": 437.6,\r\n                \"y\": 108.2 \r\n            },\r\n            \"underLipTop\": {\r\n                \"x\": 436.8,\r\n                \"y\": 111.4 \r\n            },\r\n            \"underLipBottom\": {\r\n                \"x\": 437.3,\r\n                \"y\": 114.5 \r\n            }\r\n        },\r\n        \"faceAttributes\": {\r\n            \"age\": 71.0,\r\n            \"gender\": \"male\",\r\n            \"smile\": 0.88,\r\n            \"facialHair\": {\r\n                \"mustache\": 0.8,\r\n                \"beard\": 0.1,\r\n                \"sideburns\": 0.02\r\n                }\r\n            },\r\n            \"glasses\": \"sunglasses\",\r\n            \"headPose\": {\r\n                \"roll\": 2.1,\r\n                \"yaw\": 3,\r\n                \"pitch\": 0\r\n            }\r\n        }\r\n    }\r\n]"
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>JSON parsing error. Bad or unrecognizable request JSON body.</td></tr>\r\n<tr><td>BadArgument</td><td>Invalid returnFaceAttributes. Supported values are: age, gender, headPose, smile, facialHair, glasses in a comma-separated format.\r\n<tr><td>InvalidURL</td><td>Invalid image format or URL. Supported formats include JPEG, PNG, GIF(the first frame) and BMP.</td></tr>\r\n<tr><td>InvalidURL</td><td>Failed to download image from the specified URL. Remote server error returned.</td></tr>\r\n<tr><td>InvalidImage</td><td>Decoding error, image format unsupported.</td></tr>\r\n<tr><td>InvalidImageSize</td><td>Image size is too small or too big. The valid image file size should be larger than or equal to 1KB but no larger than 4MB.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "408": {
            "description": "\r\nOperation exceeds maximum execution time.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Content-Type is not in the allowed types:<br/>\r\n<ol>\r\n<li>For an image URL, Content-Type should be application/json</li>\r\n<li>For a local image, Content-Type should be application/octet-stream</li>\r\n</ol>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/findsimilars": {
      "post": {
        "description": "\r\n\r\nGiven query face's faceId, to search the similar-looking faces from a faceId array or a faceListId. faceId array contains the faces created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>, which will expire in 24 hours after creation. While \"faceListId\" is created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b\">Face List - Create a Face List</a> containing persistedFaceIds that will not expire. Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.\r\n\r\n<br/><br/>\r\nFind similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty list will be returned if no faces pass the internal thresholds.\r\n\"matchFace\" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching celebrity-looking faces.\r\n<h4>Http Method</h4>\r\nPOST\r\n  ",
        "operationId": "Face - Find Similar",
        "parameters": [
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId.\r\n<br /><br />JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>persistedFaceId</td><th>String</th><td>persistedFaceId of candidate face when find by faceListId. persistedFaceId in face list is persisted and will not expire. As showed in below response.</td></tr>\r\n<tr><td>faceId</td><th>String</th><td>faceId of candidate face when find by faceIds. faceId is created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call. </td></tr>\r\n<tr><td>confidence</td><th>Number</th><td>Similarity confidence of the candidate face. The higher confidence, the more similar. Range between [0,1].</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": "[\r\n    {\r\n        \"persistedFaceId\" : \"015839fb-fbd9-4f79-ace9-7675fc2f1dd9\",    \r\n        \"confidence\" : 0.82\r\n    },\r\n    ...\r\n]"
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>Invalid request body.</td></tr>\r\n<tr><td>BadArgument</td><td>mode is invalid.</td></tr>\r\n<tr><td>BadArgument</td><td>maxNumOfCandidatesReturned out of range [1, 1000]</td></tr>\r\n<tr><td>BadArgument</td><td>Length of faceIds out of range [1, 1000].</td></tr>\r\n<tr><td>BadArgument</td><td>Both faceListId and faceIds are not provided.</td></tr>\r\n<tr><td>BadArgument</td><td>Argument faceListId and faceIds cannot be provided at the same time.</td></tr>\r\n<tr><td>BadArgument</td><td>Face list ID is invalid.</td></tr>\r\n<tr><td>FaceNotFound</td><td>Query face cannot be found.</td></tr>\r\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\r\n<tr><td>FaceListNotReady</td><td>Face list is empty.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/group": {
      "post": {
        "description": "\r\nDivide candidate faces into groups based on face similarity.\r\n<br/>\r\n<ul>\r\n<li>The output is one or more disjointed face groups and a messyGroup. A face group contains faces\r\nthat have similar looking, often of the same person. Face groups are ranked by\r\ngroup size, i.e. number of faces. Notice that faces belonging to a same person might be split into several groups in the result.\r\n</li>\r\n<li>MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces\r\nfound their counterparts.</li>\r\n<li>Group API needs at least 2 candidate faces and 1000 at most. We suggest to try <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a\">Face - Verify</a> when you only have 2 candidate faces.</li>\r\n</ul>\r\n<h4>Http Method</h4>\r\nPOST\r\n  ",
        "operationId": "Face - Group",
        "parameters": [
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns one or more groups of similar faces (rank by group size) and a messyGroup.\r\n<br /><br />JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>groups</td><th>Array</th><td>A partition of the original faces based on face similarity. Groups are ranked by number of faces.</td></tr>\r\n<tr><td>messyGroup</td><th>Array</th><td>Face ids array of faces that cannot find any similar faces from original faces.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "groups": [
                  [
                    "c5c24a82-6845-4031-9d5d-978df9175426",
                    "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                    "fce92aed-d578-4d2e-8114-068f8af4492e",
                    "b64d5e15-8257-4af2-b20a-5a750f8940e7"
                  ],
                  [
                    "65d083d4-9447-47d1-af30-b626144bf0fb",
                    "30ea1073-cc9e-4652-b1e3-d08fb7b95315"
                  ]
                ],
                "messyGroup": [
                  "be386ab3-af91-4104-9e6d-4dae4c9fddb7"
                ]
              }
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>Invalid request body.</td></tr>\r\n<tr><td>BadArgument</td><td>Candidate faces count out of range [1, 1000].</td></tr>\r\n<tr><td>FaceNotFound</td><td>Current face is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/identify": {
      "post": {
        "description": "\r\nIdentify unknown faces from a person group.\r\n<br/><br/>\r\nFor each face in the faceIds array,\r\nFace Identify will compute similarities between the query face and all the faces in the person group (given by personGroupId),\r\nand returns candidate person(s) for that face ranked by similarity confidence.\r\nThe person group should be trained to make it ready for identification. See more in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249\">Person Group - Train Person Group</a>.\r\n<br/><br/>\r\nRemarks:\r\n<ul>\r\n<li>The algorithm allows more than one face to be identified independently at the same request, but the no more than 10 faces.</li>\r\n<li>Each person in the person group could have more than one face, but no more than 248 faces.</li>\r\n<li>Identification works well for frontal faces and near-frontal faces.</li>\r\n<li>Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the candidate returned will be an empty array.</li>\r\n<li>Try <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a> when you need to identify similar faces from a face list instead of a person group.</li>\r\n</ul>\r\n<h4>Http Method</h4>\r\nPOST\r\n  ",
        "operationId": "Face - Identify",
        "parameters": [
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns the identified candidate person(s) for each query face.\r\n<br/><br/>JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>faceId</td><th>String</th><td>faceId of the query face.</td></tr>\r\n<tr><td>candidates</td><th>Array</th><td>Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. </td></tr>\r\n<tr><td>personId</td><th>String</th><td>personId of candidate person.</td></tr>\r\n<tr><td>confidence</td><th>Number</th><td>A float number between 0.0 and 1.0.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": "{\r\n    [\r\n        {\r\n            \"faceId\":\"c5c24a82-6845-4031-9d5d-978df9175426\",\r\n            \"candidates\":[\r\n                {\r\n                    \"personId\":\"25985303-c537-4467-b41d-bdb45cd95ca1\",\r\n                    \"confidence\":0.92\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"faceId\":\"65d083d4-9447-47d1-af30-b626144bf0fb\",\r\n            \"candidates\":[\r\n                {\r\n                    \"personId\":\"2ae4935b-9659-44c3-977f-61fac20d0538\",\r\n                    \"confidence\":0.89\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>Invalid request body.</td></tr>\r\n<tr><td>BadArgument</td><td>The argument maxNumOfCandidatesReturned is not valid. Range is [1,5]</td></tr>\r\n<tr><td>BadArgument</td><td>The argument confidenceThreshold is not valid. Range is [0, 1]</td></tr>\r\n<tr><td>BadArgument</td><td>Face ID is invalid.</td></tr>\r\n<tr><td>BadArgument</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>FaceNotFound</td><td>Face is not found.</td></tr>\r\n<tr><td>PersonGroupNotTrained</td><td>Person group 'sample_group' not trained.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Person group 'sample_group' is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "409": {
            "description": "\r\nTraining process is conflict with identify. Try identify again when training is finished.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/verify": {
      "post": {
        "description": "\r\nVerify whether two faces belong to a same person or whether one face belongs to a person.\r\n<br/><br/>\r\nRemarks:\r\n<ul>\r\n<li>This API works well for frontal and near-frontal faces. </li>\r\n<li>For the scenarios that are sensitive to accuracy please make your own judgment.</li>\r\n</ul>\r\n<h4>Http Method</h4>\r\nPOST\r\n  ",
        "operationId": "Face - Verify",
        "parameters": [
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns the verification result.\r\n<br /><br />JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>isIdentical</td><th>Boolean</th><td>True if the two faces belong to the same person or the face belongs to the person, otherwise false.</td></tr>\r\n<tr><td>confidence</td><th>Number</th><td>A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override \"isIdentical\" and fine-tune the result on their own data.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "isIdentical": true,
                "confidence": 0.9
              }
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n<tr><td>BadArgument</td><td>Face ID is invalid. faceId1, faceId2 or faceId is invalid and valid faceId comes from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>. </td></tr>\r\n<tr><td>BadArgument</td><td>Person ID is invalid. Valid personId is generated from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c\r\n  \">Person - Create a Person</a> for existing person.</td></tr>\r\n<tr><td>BadArgument</td><td>Request body is invalid.</td></tr>\r\n<tr><td>BadArgument</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>FaceNotFound</td><td>Face is not found. The faceId is expired or not exist.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person Group is not found.</td></tr>\r\n</tbody>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedFaces": {
      "post": {
        "description": "<p>Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.\r\nIt returns a persistedFaceId representing the added face and this persistedFaceId will not expire. Note persistedFaceId is different from faceId which represents the detected face by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.</p>\r\n<ul>\r\n<li>The persistedFaceId of person is used in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e\">Person - Delete a Person Face</a> to remove a face from a person. </li>\r\n<li>Each person has a maximum of 248 faces.</li>\r\n<li>JPEG, PNG, GIF(the first frame), and BMP are supported. The image file size should be larger than or equal to 1KB but no larger than 4MB.</li>\r\n<li>The detectable face size is between 36x36 to 4096x4096 pixels. The faces out of this range will not be detected.</li>\r\n<li>Rectangle specified by targetFace should contain exactly one face. Zero or multiple faces will be regarded as an error. Out of detectable face size, large head-pose, or very large occlusions will also result in fail to add a person face.</li>\r\n<li>The given rectangle specifies both face location and face size at the same time. There is no guarantee of correct result if you are using rectangle which is not returned from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.  </li>\r\n</ul>\r\n<h4>Http Method</h4>\r\nPOST\r\n  ",
        "operationId": "Person - Add a Person Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Target person that the face is added to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-specified data about the target face to add for any purpose. The maximum length is 1KB. ",
            "type": "string"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. ",
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns the new persistedFaceId.\r\n<br/><br/>JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>persistedFaceId</td><th>String</th><td>persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call. </td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA"
              }
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Invalid request body.</td></tr>\r\n<tr><td>BadArgument</td><td>Argument targetFace out of range, targetFace is valid but it's intersection with the entire image is empty.</td></tr>\r\n<tr><td>BadArgument</td><td>Invalid argument targetFace. Caused by invalid string format or invalid left/top/height/width value. </td></tr>\r\n<tr><td>InvalidImage</td><td>Decoding error, image format unsupported.</td></tr>\r\n<tr><td>InvalidImage</td><td>No face detected in the image or in the specified targetFace area.</td></tr>\r\n<tr><td>InvalidImage</td><td>There is more than 1 face in the image or in the specified targetFace area.</td></tr>\r\n<tr><td>InvalidImageSize</td><td>Image size is too small or too big.</td></tr>\r\n<tr><td>InvalidURL</td><td>Invalid image URL.</td></tr>\r\n<tr><td>InvalidURL</td><td>Failed to download from target server. Remote server error returned.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "\r\nPersisted face number reached limit, maximum is 248 per person.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Persisted face number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "408": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Content-Type is not in the allowed types:<br/>\r\n<ol>\r\n<li>For an image URL, Content-Type should be application/json</li>\r\n<li>For a local image, Content-Type should be application/octet-stream</li>\r\n</ol>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}/persons": {
      "post": {
        "description": "\r\nCreate a new person in a specified person group. A newly created person have no registered face, you can call <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\r\n\">Person - Add a Person Face</a> API to add faces to the person.\r\n<br/><br/>\r\nThe number of persons has a subscription level limit and person group level limit. Person group level limit is 1000 for both free and paid tier subscriptions. Subscription level limit is 1000 for free tier subscription and can be greater in paid tier subscriptions.\r\n<h4>Http Method</h4>\r\nPOST\r\n  \r\n\r\n",
        "operationId": "Person - Create a Person",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the target person group to create the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns a new personId created.\r\n<br/><br/>\r\nJSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>personId</td><th>String</th><td>personID of the new created person.</td></tr>\r\n\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "personId": "25985303-c537-4467-b41d-bdb45cd95ca1"
              }
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "\r\nPerson number reached subscription level limit or person group level limit.\r\nMaximum person count per person group is 1000. Maximum person count per subscription is 1000 for free tier and can be greater for paid tier.\r\n  \r\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Person number reached subscription level limit."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Face list 'sample_list' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "description": "\r\nList all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Person - List Persons in a Person Group",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of the target person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns an array of person information that belong to the person group.\r\n<br/><br/>JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>personId</td><th>String</th><td>personId of the person in the person group.</td></tr>\r\n<tr><td>name</td><th>String</th><td>Person's display name.</td></tr>\r\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the person.</td></tr>\r\n<tr><td>persistedFaceIds</td><th>Array</th><td>persistedFaceId array of registered faces of the person.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": "[\r\n    {\r\n        \"personId\":\"25985303-c537-4467-b41d-bdb45cd95ca1\",\r\n        \"name\":\"Ryan\",\r\n        \"userData\":\"User-provided data attached to the person\",\r\n        \"persistedFaceIds\":[\r\n          \"015839fb-fbd9-4f79-ace9-7675fc2f1dd9\",\r\n          \"fce92aed-d578-4d2e-8114-068f8af4492e\",\r\n          \"b64d5e15-8257-4af2-b20a-5a750f8940e7\"\r\n        ]\r\n    },\r\n    {\r\n        \"personId\":\"2ae4935b-9659-44c3-977f-61fac20d0538\",\r\n        \"name\":\"David\",\r\n        \"userData\":\"User-provided data attached to the person\",\r\n            \"persistedFaceIds\":[\r\n            \"30ea1073-cc9e-4652-b1e3-d08fb7b95315\",\r\n            \"fbd2a038-dbff-452c-8e79-2ee81b1aa84e\"\r\n        ]\r\n    }\r\n]"
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}": {
      "delete": {
        "description": "\r\nDelete an existing person from a person group. Persisted face images of the person will also be deleted.\r\n<h4>Http Method</h4>\r\nDELETE\r\n  ",
        "operationId": "Person - Delete a Person",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "The target personId to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns an empty response body.\r\n  "
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "description": "\r\nRetrieve a person's information, including registered persisted faces, name and userData.\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Person - Get a Person",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Specifying the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns the person's information.\r\n<br/><br/>JSON fields in response body:\r\n\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>personId</td><th>String</th><td>personId of the retrieved person.</td></tr>\r\n<tr><td>persistedFaceIds</td><th>Array</th><td>persistedFaceIds of registered faces in the person. These persistedFaceIds are returned from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\">Person - Add a Person Face</a>, and will not expire.</td></tr>\r\n<tr><td>name</td><th>String</th><td>Person's display name.</td></tr>\r\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the person.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
                "persistedFaceIds": [
                  "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                  "fce92aed-d578-4d2e-8114-068f8af4492e",
                  "b64d5e15-8257-4af2-b20a-5a750f8940e7"
                ],
                "name": "Ryan",
                "userData": "User-provided data attached to the person"
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "patch": {
        "description": "\r\nUpdate name or userData of a person.\r\n<h4>Http Method</h4>\r\nPATCH\r\n  ",
        "operationId": "Person - Update a Person",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}": {
      "delete": {
        "description": "\r\nDelete a face from a person. Relative image for the persisted face will also be deleted.\r\n<h4>Http Method</h4>\r\nDELETE\r\n  ",
        "operationId": "Person - Delete a Person Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Specifying the person that the target persisted face belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "The persisted face to remove. This persistedFaceId is returned from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\">Person - Add a Person Face</a>.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersistedFaceNotFound</td><td>Face ID is invalid.</td></tr>\r\n<tr><td>PersistedFaceNotFound</td><td>Face is not found.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "description": "\r\nRetrieve information about a persisted face (specified by persistedFaceId, personId and its belonging personGroupId).\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Person - Get a Person Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Specifying the target person that the face belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "The persistedFaceId of the target persisted face of the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns target persisted face's information (persistedFaceId and userData).\r\n<br/><br/>\r\nJSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>persistedFaceId</td><th>String</th><td>The persistedFaceId of the target face, which is persisted and will not expire. Different from faceId created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call.</td></tr>\r\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the face.</td></tr>\r\n\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "persistedFaceId": "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                "userData": "User-provided data attached to the person"
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersistedFaceNotFound</td><td>Face ID is invalid.</td></tr>\r\n<tr><td>PersistedFaceNotFound</td><td>Face is not found.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "patch": {
        "description": "\r\nUpdate a person persisted face's userData field.\r\n<h4>Http Method</h4>\r\nPATCH\r\n  ",
        "operationId": "Person - Update a Person Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of target face, which is persisted and will not expire.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n\r\n\r\n<tr><td>PersistedFaceNotFound</td><td>Face ID is invalid.</td></tr>\r\n<tr><td>PersistedFaceNotFound</td><td>Face is not found.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\r\n<tr><td>PersonNotFound</td><td>Person ID is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}": {
      "put": {
        "description": "\r\nCreate a new person group with specified personGroupId, name and user-provided userData.\r\n<br/><br/>\r\nA person group is one of the most important parameters for the <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a> API. The Identify\r\nsearches person faces in a specified person group.\r\n<h4>Http Method</h4>\r\nPUT\r\n  ",
        "operationId": "Person Group - Create a Person Group",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "User-provided personGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the personGroupId is 64.\n        ",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns an empty response body.\r\n  "
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n<tr><td>BadArgument</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters. </td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupExists</td><td>Person group already exists.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupExists",
                  "message": "Person group 'sample_group' already exists."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "description": "\r\nDelete an existing person group. Persisted face images of all people in the person group will also be deleted.\r\n<h4>Http Method</h4>\r\nDELETE\r\n  ",
        "operationId": "Person Group - Delete a Person Group",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "The personGroupId of the person group to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "description": "\r\nRetrieve the information of a person group, including its name and userData. This API returns person group information only, use <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241\">Person - List Persons in a Person Group</a> instead to retrieve person information under the person group.\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Person Group - Get a Person Group",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of the target person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns the person group's information.\r\n<br/><br/>JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>personGroupId</td><th>String</th><td>Target personGroupId provided in request parameter.</td></tr>\r\n<tr><td>name</td><th>String</th><td>Person group's display name.</td></tr>\r\n<tr><td>userData</td><th>String</th><td>User-provided data attached to this person group.</td></tr>\r\n\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "personGroupId": "sample_group",
                "name": "group1",
                "userData": "User-provided data attached to the person group"
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "patch": {
        "description": "\r\nUpdate an existing person group's display name and userData. The properties which does not appear in request body will not be updated.\r\n<h4>Http Method</h4>\r\nPATCH\r\n  ",
        "operationId": "Person Group - Update a Person Group",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of the person group to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>personGroupId is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}/training": {
      "get": {
        "description": "\r\nRetrieve the training status of a person group (completed or ongoing). Training can be triggered by the <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249\">Person Group - Train Person Group</a> API. The training will process for a while on the server side..\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Person Group - Get Person Group Training Status",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of target person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns the person group's training status.\r\n<br /><br />JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>status</td><th>String</th><td>Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group is ready for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>. Status failed is often caused by no person or no persisted face exist in the person group. </td></tr>\r\n<tr><td>createdDateTime</td><th>String</th><td>A combined UTC date and time string that describes person group created time, delimited by the letter <i>T</i>. E.g. 2015-05-15T13:45:30.</td></tr>\r\n<tr><td>lastActionDateTime</td><th>String</th><td>Person group last modify time in the UTC, could be null value when the person group is not successfully trained.</td></tr>\r\n<tr><td>message</td><th>String</th><td>Show failure message when training failed (omitted when training succeed).</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "status": "succeeded",
                "createdDateTime": "2015-05-15T13:45:30",
                "lastActionDateTime": null,
                "message": null
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n<tr><td>PersonGroupNotTrained</td><td>Person group has not been trained. This error appears on getting training status of a group which never been trained.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups": {
      "get": {
        "description": "\r\nList person groups and their information. \r\n\r\n<ul>\r\n<li>\r\nOptional string parameter \"start\" and int parameter \"top\" are adopted to specify the starting point and total number of person groups to return. All of the person groups are stored in alphabetical order of personGroupId. And the list starting point is defined as the first person group whose personGroupId is greater than the \"start\". Beginning from this starting point, this API returns the first \"top\" person groups.\r\n<ul>\r\n<li>\r\nDefaults to return the first 1000 person groups, where the value of \"start\" is empty and \"top\" is 1000. Empty array returned indicates that there is no person group whose personGroupId is lager than the \"start\". E.g., given two person groups: \"first_group\" and \"second_group\", these two groups are returned with default parameter, \"second_group\" is returned if specify \"first_group\" as \"start\", and if specify \"second_group\" as \"start\", empty array is returned.\r\n<ul>\r\n<li>\r\nThe last personGroupId returned by current call can be used as the \"start\" of the next call to continuously list the person groups.\r\n</ul>\r\n</ul>\r\n</ul>\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Person Group - List Person Groups",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List person groups from the least personGroupId greater than the \"start\". It contains no more than 64 characters. Default is empty. ",
            "type": "string",
            "enum": [
              ""
            ]
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of person groups to list, ranging in [1, 1000]. Default is 1000. ",
            "type": "integer",
            "default": 1000
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns an array of person groups and their information (personGroupId, name and userData). \r\n<br /><br />JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>personGroupId</td><th>String</th><td>personGroupId of the existing person groups, created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\">Person Group - Create a Person Group</a>.</td></tr>\r\n<tr><td>name</td><th>String</th><td>Person group's display name.</td></tr>\r\n<tr><td>userData</td><th>String</th><td>User-provided data attached to this person group.</td></tr>\r\n\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": "[\r\n    {\r\n        \"personGroupId\":\"sample_group\",\r\n        \"name\":\"group1\",\r\n        \"userData\":\"User-provided data attached to the person group\"\r\n    },\r\n    {\r\n        \"personGroupId\":\"sample_group2\",\r\n        \"name\":\"group2\",\r\n        \"userData\":\"User-provided data attached to the person group\"\r\n    }\r\n]"
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>Parameter top is invalid. Valid range is [1, 1000].</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 400,
                  "message": "Parameter top is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}/train": {
      "post": {
        "description": "\r\nQueue a person group training task, the training task may not be started immediately.\r\n<br/><br/>\r\nAny updates to person group will not take effect in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a> until person group is successfully trained.\r\nYou can query the training status by calling <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395247\">Person Group - Get Person Group Training Status</a> API.\r\n<h4>Http Method</h4>\r\nPOST\r\n  ",
        "operationId": "Person Group - Train Person Group",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Target person group to be trained.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "\r\nA successful call returns an empty JSON body.\r\n  "
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group 'sample_group' is not found."
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersonGroupTrainingNotFinished</td><td>Person group is under training.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group 'sample_group' is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/facelists/{faceListId}": {
      "put": {
        "description": "\r\n<p>Create an empty face list with user-specified faceListId, name and an optional userData. Up to 64 face lists are allowed to exist in one subscription.</p>\r\n<p>\r\nFace list is a group of faces, and these faces will not expire. Face list is used as a parameter of source faces in\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\r\nFace List is useful when to find similar faces in a fixed face set very often, e.g. to find a similar face in a face list of celebrities, friends, or family members.\r\n</p>\r\n<p>A face list can have a maximum of 1000 faces.</p>\r\n<h4>Http Method</h4>\r\nPUT\r\n  ",
        "operationId": "Face List - Create a Face List",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.\n        ",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n<tr><td>BadArgument</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "Face list number reached limit, maximum is 64.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Face list number reached limit"
                }
              }
            }
          },
          "409": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>FaceListExists</td><td>Face list already exists.</td></tr>\r\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on resource.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListExists",
                  "message": "Face list 'sample_list' already exists."
                }
              }
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "description": "\r\nRetrieve a face list's information, including faceListId, name, userData and faces in the face list. Face list simply represents a list of faces, and could be treated as a searchable data source in\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Face List - Get a Face List",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns the face list's information.\r\n<br/><br/>JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>faceListId</td><th>String</th><td>faceListId of the target face list.</td></tr>\r\n<tr><td>name</td><th>String</th><td>Face list's display name.</td></tr>\r\n<tr><td>userData</td><th>String</th><td>User-provided data attached to this face list.</td></tr>\r\n<tr><td>persistedFaces</td><th>Array</th><td>Faces in the face list.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": "{\r\n    \"faceListId\": \"sample_list\",\r\n    \"name\": \"list1\",\r\n    \"userData\":\"User-provided data attached to the face list\",\r\n    \"persistedFaces\":[\r\n       {\r\n          \"persistedFaceId\":\"B8D802CF-DD8F-4E61-B15C-9E6C5844CCBD\",\r\n          \"userData\":\"User-provided data attached to the face\"\r\n       },\r\n       …\r\n    ]\r\n}"
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>PersistedFaceListNotFound</td><td>Persisted face list ID is invalid.</td></tr>\r\n<tr><td>PersistedFaceListNotFound</td><td>Persisted face list is not found.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list 'sample_list' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "patch": {
        "description": "\r\nUpdate information of a face list, including name and userData. Face List simply represents a list of persisted faces, and could be treated as a searchable data source in\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\r\n<h4>Http Method</h4>\r\nPATCH\r\n  ",
        "operationId": "Face List - Update a Face List",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\r\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-' and '_'. and no longer than 64 characters.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceListNotFound",
                  "message": "Face list 'sample_list' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Only \"application/json\" is valid for this API.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "description": "\r\nDelete an existing face list according to faceListId. Persisted face images in the face list will also be deleted.\r\n<h4>Http Method</h4>\r\nDELETE\r\n  ",
        "operationId": "Face List - Delete a Face List",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\r\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list 'sample_list' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/facelists": {
      "get": {
        "description": "\r\nRetrieve information about all existing face lists. Only faceListId, name and userData will be returned. Try <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c\">Face List - Get a Face List</a> to retrieve face information inside faceList.\r\n<h4>Http Method</h4>\r\nGET\r\n  ",
        "operationId": "Face List - List Face Lists",
        "parameters": [
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns an array of faceList.\r\n<br /><br />JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>faceListId</td><th>String</th><td>Face list ID</td></tr>\r\n<tr><td>name</td><th>String</th><td>Face list name which user assigned</td></tr>\r\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the face list</td></tr>\r\n\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": "[\r\n   {\r\n       \"faceListId\": \"sample_list\",\r\n       \"name\": \"list1\",\r\n       \"userData\":\"User-provided data attached to the face list\"\r\n    },\r\n    …\r\n]"
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/facelists/{faceListId}/persistedFaces": {
      "post": {
        "description": "<p>Add a face to a face list. The input face is specified as an image with a targetFace rectangle.\r\nIt returns a persistedFaceId representing the added face, and persistedFaceId will not expire. Note persistedFaceId is different from faceId which represents the detected face by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.\r\n<ul>\r\n<li>The persistedFaceId of face list is used in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251\">Face List - Delete a Face from a Face List</a> to remove face from a face list, or the output JSON of\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a> \r\n</li>\r\n<li>JPEG, PNG, GIF(the first frame), and BMP are supported. The image file size should be larger than or equal to 1KB but no larger than 4MB.</li>\r\n<li>The detectable face size is between 36x36 to 4096x4096 pixels. The faces out of this range will not be detected.</li>\r\n<li>Rectangle specified by targetFace should contain exactly one face. Zero or multiple faces will be regarded as an error. Out of detectable face size, large head-pose, or very large occlusions will also result in fail to add a person face.</li>\r\n<li>The given rectangle specifies both face location and face size at the same time. There is no guarantee of correct result if you are using rectangle which are not returned from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.  </li>\r\n</ul>\r\n<p>\r\nFace list is a group of faces, and these faces will not expire. Face list is used as a parameter of source faces in\r\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\r\nFace List is useful when to find similar faces in a fixed face set very often, e.g. to find a similar face in a face list of celebrities, friends, or family members.</p>\r\n<p>\r\nA face list can have a maximum of 1000 faces.\r\n</p>\r\n<h4>Http Method</h4>\r\nPOST",
        "operationId": "Face List - Add a Face to a Face List",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-specified data about the face list for any purpose. The  maximum length is 1KB.",
            "type": "string"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added into the face list, in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "\r\nA successful call returns a new persistedFaceId.\r\n<br/><br/>JSON fields in response body:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>persistedFaceId</td><th>String</th><td>persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA"
              }
            }
          },
          "400": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\r\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\r\n<tr><td>BadArgument</td><td>Argument targetFace out of range, targetFace is valid but it's intersection with the entire image is empty.</td></tr>\r\n<tr><td>BadArgument</td><td>Invalid argument targetFace. Caused by invalid string format or invalid left/top/height/width value. </td></tr>\r\n<tr><td>InvalidURL</td><td>Invalid image URL.</td></tr>\r\n<tr><td>InvalidURL</td><td>Failed to download from target server. Remote server error returned.</td></tr>\r\n<tr><td>InvalidImage</td><td>There is more than 1 face in the image or in the specified targetFace area. </td></tr>\r\n<tr><td>InvalidImage</td><td>No face detected in the image or in the specified targetFace area.</td></tr>\r\n<tr><td>InvalidImage</td><td>Decoding error, image format unsupported.</td></tr>\r\n<tr><td>InvalidImageSize</td><td>Image size is too small or too big.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "JSON parsing error."
                }
              }
            }
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "\r\nPersisted face number reached limit, maximum is 1000 per face list.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Face number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\r\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list 'sample_list' is not found."
                }
              }
            }
          },
          "408": {
            "description": "\r\nOperation exceeds maximum execution time.\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "415": {
            "description": "\r\nUnsupported media type error. Content-Type is not in the allowed types:<br/>\r\n<ol>\r\n<li>For an image URL, Content-Type should be application/json</li>\r\n<li>For a local image, Content-Type should be application/octet-stream</li>\r\n</ol>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type"
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/facelists/{faceListId}/persistedFaces/{persistedFaceId}": {
      "delete": {
        "description": "\r\nDelete an existing face from a face list (given by a persisitedFaceId and a faceListId). Persisted image related to the face will also be deleted.\r\n<h4>Http Method</h4>\r\nDELETE\r\n  ",
        "operationId": "Face List - Delete a Face from a Face List",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "faceListId of an existing face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2.12 days."
                }
              }
            }
          },
          "404": {
            "description": "\r\nError code and message returned in JSON:\r\n<table class=\"element table\">\r\n<thead>\r\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\r\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\r\n<tr><td>PersistedFaceNotFound</td><td>Persisted face is not found.</td></tr>\r\n<tr><td>PersistedFaceNotFound</td><td>Persisted face ID is invalid.</td></tr>\r\n</tbody>\r\n</table>\r\n  ",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list 'sample_list' is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\r\n    \"error\":{\r\n        \"code\": ConcurrentOperationConflict,\r\n        \"message\": \"There is a conflict operation on resource 'sample_group', please try later.\"\r\n    }\r\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }
  }
}