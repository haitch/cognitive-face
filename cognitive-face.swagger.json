{
  "swagger": "2.0",
  "info": {
    "title": "Face API - V1.0",
    "version": "1.0"
  },
  "host": "westus.api.cognitive.microsoft.com",
  "basePath": "/face/v1.0",
  "schemes": [
    "https"
  ],
  "paths": {
    "/detect": {
      "post": {
        "description": "Detect **human faces** in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.",
        "operationId": "faceDetect",
        "parameters": [
          {
            "name":"imageUrl",
            "in": "body",
            "schema":{
              "$ref":"#/definitions/faceDetectByUrlRequest"
            },
            "required":true
          },
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "Return faceIds of the detected faces or not. The default value is true. ",
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "Return face landmarks of the detected faces or not. The default value is false. ",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/cognitive-services-apiKey"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates no faces detected."
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/group": {
      "post": {
        "description": "Divide candidate faces into groups based on face similarity.",
        "operationId": "group",
        "parameters": [
          {
            "name":"faceIds",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/groupFaceRequest"
            }
          },
          {
            "$ref": "#/parameters/cognitive-services-apiKey"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns one or more groups of similar faces (rank by group size) and a messyGroup.",
            "examples": {
              "application/json": {
                "groups": [
                  [
                    "c5c24a82-6845-4031-9d5d-978df9175426",
                    "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                    "fce92aed-d578-4d2e-8114-068f8af4492e",
                    "b64d5e15-8257-4af2-b20a-5a750f8940e7"
                  ],
                  [
                    "65d083d4-9447-47d1-af30-b626144bf0fb",
                    "30ea1073-cc9e-4652-b1e3-d08fb7b95315"
                  ]
                ],
                "messyGroup": [
                  "be386ab3-af91-4104-9e6d-4dae4c9fddb7"
                ]
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/identify": {
      "post": {
        "description": "Identify unknown faces from a person group.",
        "operationId": "identify",
        "parameters": [
          {
            "name":"faceIdentifyRequest",
            "in": "body",
            "schema":{
              "$ref":"#/definitions/faceIdentifyRequest"
            },
            "required":true
          },
          {
            "$ref": "#/parameters/cognitive-services-apiKey"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face."
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/persongroups/{personGroupId}": {
      "put": {
        "description": "Create a new person group with specified personGroupId, name and user-provided userData.",
        "operationId": "createPersonGroup",
        "parameters": [
          {
            "$ref":"#/parameters/personGroupIdInPath"
          },
          {
            "name":"personGroup",
            "in": "body",
            "schema":{
              "$ref":"#/definitions/personGroup"
            },
            "required":true
          },
          {
            "$ref": "#/parameters/cognitive-services-apiKey"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          }
        }
      },
      "delete": {
        "description": "delete a person group with specified personGroupId.",
        "operationId": "deletePersonGroup",
        "parameters": [
          {
            "$ref":"#/parameters/personGroupIdInPath"
          },
          {
            "$ref": "#/parameters/cognitive-services-apiKey"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          }
        }
      }
    }
  },
  "parameters": {
    "cognitive-services-apiKey": {
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header",
      "description": "subscription key in header",
      "type": "string",
      "required": true
    },
    "personGroupIdInPath":{
      "name": "personGroupId",
      "in": "path",
      "description": "User-provided personGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the personGroupId is 64.",
      "required": true,
      "type": "string"
    }
  },
  "definitions": {
    "faceDetectByUrlRequest": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "groupFaceRequest": {
      "type": "array",
      "items": {
        "type":"string"
      }
    },
    "personGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "userData":{
          "type":"object"
        }
      }
    },
    "faceIdentifyRequest": {
      "type":"object",
      "properties": {
        "personGroupId":{
          "type":"string"
        },
        "faceIds":{
          "type":"array",
          "items":{
            "type": "string"
          }
        },
        "maxNumOfCandidatesReturned":{
          "type":"integer"
        },
        "confidenceThreshold":{
          "type":"number"
        }
      }
    }
  } 
}